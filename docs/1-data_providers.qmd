---
title:  "Two Data Providers"
author: <br>MGMT 638<br>Jones Graduate School of Business<br>Rice University<br>Fall 2022<br><br>Kerry Back
execute:
  echo: false
  jupyter: python3
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

## Examples of price signals

- Moving averages
- Relative strength index
- Short-term (1 week or 1 month) reversals
- Medium-term momentum (past six months or past year minus most recent month)

## Yahoo adjusted close

. . .

Yahoo's adjusted close is split and *dividend* adjusted.

. . .

```{.p code-line-numbers="1|3|4-5|6"}
!pip install pandas-datareader

from pandas_datareader import DataReader as pdr
aapl = pdr('aapl', 'yahoo', start=2010)
aapl = aapl['Adj Close']
aapl.head()
```

```{python}
from pandas_datareader import DataReader as pdr
aapl = pdr('aapl', 'yahoo', start="2022-01-01", end="2022-03-31")
aapl = aapl['Adj Close']
aapl.head()
```

## Returns from Yahoo's adjusted close

. . .



```p
ret = aapl.pct_change()        # 1-day
ret5 = aapl.pct_change(5)      # 5-day
ret20 = aapl.pct_change(20)    # 20-day

df = pd.concat((aapl, ret, ret5, ret20), axis=1)
df.columns=['close', 'ret', 'ret5', 'ret20']
df = df.dropna()
df.head()
```

. . .



```{python}
import pandas as pd
ret = 100*aapl.pct_change()        # 1-day
ret5 = 100*aapl.pct_change(5)      # 5-day
ret20 = 100*aapl.pct_change(20)    # 20-day

df = pd.concat((aapl, ret, ret5, ret20), axis=1)
df.columns=['close', 'ret', 'ret5', 'ret20']
df = df.dropna()
df.round(2).head()
df["fret5"] = df.ret5.shift(-5)

```

#



```{python}
fret = aapl.pct_change(-1)
## AAPL and its moving average

```{python}
ma = aapl.rolling(50).mean()
aapl = aapl.reset_index()
aapl.columns = ['date', 'price']

ma = ma.reset_index()
ma.columns = ['date', 'ma']

import plotly.graph_objects as go
trace1 = go.Scatter(
  x=aapl.date,
  y=aapl.price,
  name="Price",
  hovertemplate="%{x}<br>%{y:.2f}<extra></extra>",
)
trace2 = go.Scatter(
  x=ma.date,
  y=ma.ma,
  name="50 MvAvg",
  hovertemplate="%{x}<br>%{y:.2f}<extra></extra>",
)
fig = go.Figure(trace1)
fig.add_trace(trace2)
fig.update_layout(
    template="plotly_dark",
    xaxis_title="",
    yaxis_title="",
    yaxis_tickprefix="$",
    yaxis_tickformat=".0f",
    xaxis_title_font_size=24,
    yaxis_title_font_size=24,
    font_size=20,
    width=1000,
    height=460,
    legend=dict(
      xanchor="left",
      x=0.01,
      yanchor="top",
      y=0.99
    )
  )
fig.show()
```

## Crossing the moving average

- A downward cross occurs when AAPL > MvAvg one day and < the next.
- An upward cross occurs when AAPL < MvAvg one day and > the next.
- Does it have predictive power?
  - Next day return?
  - Next week return?

```{.p code-line-numbers="1|2"}
down = (aapl.shift()>ma50.shift()) & (aapl<ma50)
up = (aapl.shift()<ma50.shift()) & (aapl>ma50)
other = (!down) & (!up)
```

```{python}
df = aapl.merge(ma, left_on="date", right_on="date", how="inner")
df['ret'] = df.price.pct_change()
df['down'] = (df.price.shift()>df.ma.shift()) & (df.price<df.ma)
df['up'] = (df.price.shift()<df.ma.shift()) & (df.price>df.ma)
df['other'] = (~df.down) & (~df.up)
df['down'] = df.down.shift()
df['up'] = df.up.shift()
df['other'] = df.other.shift()
df = df.dropna()
meanDown = df[df.down].ret.mean()
meanUp = df[df.up].ret.mean()
meanOther = df[df.other].ret.mean()
print(f"mean following down is {meanDown:.2%}")
print(f"mean following up is {meanUp:.2%}")
print(f"other mean is {meanOther:.2%}")
```