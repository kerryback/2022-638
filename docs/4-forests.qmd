---
title:  "Forests"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

## Types of forests

- Random forest
- Boosting
  - Gradient boosting
  - Extreme gradient boosting (XG Boost)
  - Adaptive boosting (Ada Boost)

. . .

In this class, we'll use random forests.

## Random forest

- Create samples of same size as original by drawing observations randomly with replacement from the original sample.
- Fit a tree to each randomly generated sample.
- Average the trees to predict.

## Predictions

- In each tree, answer the yes/no questions to find the leaf for an observation
- The prediction for that tree is
  - the leaf mean for regression
  - the leaf class probabilities for classification
- Repeat for each tree in the forest and average predictions
- For classification, the class with the highest average probability is the prediction.

## Example


- We'll use random forest regression for ranks.
- Get roeq and mom12m as before, and define rnk.
- Could also try return or numerical class (0, 1, 2).

#


```{.p code-line-numbers="1|3-4|6-9|10"}
from sklearn.ensemble import RandomForestRegressor

X = data[["roeq", "mom12m"]]
y = data["rnk"]

model = RandomForestRegressor(
  max_depth=4,
  random_state=0
)
model.fit(X,y)
```

```{python}
from sqlalchemy import create_engine
import pymssql
import pandas as pd

server = "mssql-82792-0.cloudclusters.net:16272"
username = "user"
password = "RiceOwls1912" # paste password between quote marks
database = "ghz"

string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database

conn = create_engine(string).connect()

data = pd.read_sql(
    """
    select ticker, date, ret, roeq, mom12m
    from data
    where date='2021-01'
    """, 
    conn
)
data = data.dropna()
data['rnk'] = data.ret.rank(pct=True)

from sklearn.ensemble import RandomForestRegressor

X = data[["roeq", "mom12m"]]
y = data["rnk"]

model = RandomForestRegressor(
  max_depth=4,
  random_state=0
)
_ = model.fit(X,y)
```

## Things to do

- How well does it fit?  Calculate $R^2$ with model.score(X,y).
- How important is each of the predictors?  Calculate with model.feature_importances.
- Make a prediction for a new observation with model.predict.
- Sort on predictions.  Do portfolios of stocks with high predictions have high returns?

#

```p
model.score(X,y)
```

. . .

```{python}
model.score(X,y)
```

. . .

```p
model.feature_importances
```

. . .

```{python}
model.feature_importances_
```


. . .

```p
import numpy as np
x = np.array([.1, .4]).reshape(1,2)
model.predict(x)
```

. . .

```{python}
import numpy as np
x = np.array([.1, .4]).reshape(1,2)
model.predict(x)
```

#

```p
yhat = model.predict(X)
data['quintile'] = pd.qcut(yhat, 5, labels=range(1,6))
rets = data.groupby('quintile').ret.mean()
rets
```

. . .

```{python}
yhat = model.predict(X)
data['quintile'] = pd.qcut(yhat, 5, labels=range(1,6))
rets = data.groupby('quintile').ret.mean()
rets
```

## Still to do

- We need to evaluate performance out of sample.
  - Include prediction as part of a portfolio strategy.
  - Backtest the strategy.
- Fit over multiple months (past months in backtest).
- Include more predictors.
- Implement a strategy for choosing max_depth.
