---
title:  "Analyzing Stock Picks"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#404040;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 721.scss]
    incremental: true
---

## Overview

- Load a model and make predictions for new data.
- Rank stocks on predictions: best, next best, ...
- Important to interpret the model
  - What combinations of features does it like/dislike?
  - What industries does it like/dislike?

. . .

## Example

- Load model from last session

. . .

```p
from joblib import load
forest = load("forest2.joblib")
```

- Download [2021-02]{style="color:tomato; fontweight:bold;"} data as "data.""

. . .

```p
X = data[["roeq", "mom12m"]]
```

- Make predictions
 
. . .

```p
data["predict"] = forest.predict(X)
```


## Define, fit and save model

. . .

```{.p code-line-numbers="1|3-4|6-9|10|12|13"}
from sklearn.neural_network import MLPRegressor

X = data[["roeq", "mom12m"]]
y = data["rnk"]

model = MLPRegressor(
  hidden_layer_sizes=(4, 2),
  random_state=0
)
model.fit(X,y)

from joblib import dump, load
dump(model, "net-example.joblib")
```

```{python}
from joblib import load 
forest = load("forest2.joblib")

from sqlalchemy import create_engine
import pymssql
import pandas as pd

server = "mssql-82792-0.cloudclusters.net:16272"
username = "user"
password = "RiceOwls1912" # paste password between quote marks
database = "ghz"

string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database

conn = create_engine(string).connect()

data = pd.read_sql(
    """
    select ticker, date, ret, roeq, mom12m
    from data
    where date='2021-02'
    """, 
    conn
)
data = data.dropna()

X = data[["roeq", "mom12m"]]
data["predict"] = forest.predict(X)
```

## Find the best stocks

- Sort the stocks from best to worst

. . .

```
data = data.sort_values(
  by="predict",
  ascending=False
)
data = data.reset_index()
```

- Top 5

. . .

```p
data.head()
```

```{python}
data.head()
```
